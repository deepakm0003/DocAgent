import React, { useContext, useEffect, useState } from "react";
import styled from "styled-components";
import { InnerLayout } from "../../styles/Layouts";
import send_icon from "../../img/send_icon.png";
import user_icon from "../../img/user_icon.png";
import gemini_icon from "../../img/gemini_icon.png";
import { AIContext } from "../../context/AIContext";

function AIConsult({ symptoms, diagnosis, presetPrompt }) {
  const {
    onSent,
    recentPrompt,
    showResult,
    loading,
    resultData,
    setInput,
    input,
  } = useContext(AIContext);
  const { triageLevel, clarifyingQuestions, nearbyDoctorUrl, trendsNote, downloadDoctorReport, researchCitations, lifestyleSuggestions, openPrintableReport } = useContext(AIContext);
  const [showEmergencyForm, setShowEmergencyForm] = useState(false);
  const [erForm, setErForm] = useState({ name: "", age: "", phone: "", location: "", symptoms: "", notes: "" });

  let symp = "";
  for (let sym in symptoms) {
    symp = symp + " " + symptoms[sym];
  }

  const safeDiagnosis = diagnosis ? diagnosis : "unknown";
  const defaultPrompt = `
  My current symptoms are: ${symp}.\n
  My possible disease is: ${safeDiagnosis}.\n
  What preliminary measures should I take now?
`;
  const prompt = presetPrompt && presetPrompt.trim().length > 0 ? presetPrompt : defaultPrompt;

  useEffect(() => {
    setInput(prompt);
    onSent(prompt);
  }, []);

  useEffect(() => {
    try{
      if (showEmergencyForm) {
        document.body.style.overflow = 'hidden';
      } else {
        document.body.style.overflow = '';
      }
    } catch (_) {}
    const onKey = (e)=>{ if(e.key === 'Escape') setShowEmergencyForm(false); };
    if (showEmergencyForm) window.addEventListener('keydown', onKey);
    return () => { try{ document.body.style.overflow = ''; } catch(_){}; window.removeEventListener('keydown', onKey); };
  }, [showEmergencyForm]);

  const handleSelfCare = () => {
    const text = `I have these symptoms: ${symp || ""}. Please recommend detailed self-care I can safely try at home, including red flags when I should stop and see a doctor.`;
    setInput(text);
    onSent(text);
  };

  const submitEmergencyForm = (e) => {
    e.preventDefault();
    const lines = [
      "Emergency Intake",
      "----------------",
      `Name: ${erForm.name}`,
      `Age: ${erForm.age}`,
      `Phone: ${erForm.phone}`,
      `Location: ${erForm.location}`,
      `Symptoms: ${erForm.symptoms || symp}`,
      `Notes: ${erForm.notes}`,
      "",
      "Generated by DocAgent",
    ].join("\n");
    const blob = new Blob([lines], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `Emergency_Intake_${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
    alert("Emergency form saved. Please contact local emergency services now.");
    setShowEmergencyForm(false);
  };

  return (
    <MentStyled>
      <InnerLayout className="main">
        <div className="nav">
          <h3>AI Consultation</h3>
        </div>
        <div className="main-container">
          {triageLevel !== 'normal' && (
            <div className={`triage-banner ${triageLevel}`}>
              {triageLevel === 'emergency' ? 'This may be urgent. Please seek medical help immediately.' : 'This may require prompt medical attention.'}
            </div>
          )}
          {!showResult ? (
            <>
              <div className="greet">
                <p>
                  <span>Hi, there!</span>
                </p>
                <p>How are you feeling today?</p>
              </div>
              {clarifyingQuestions?.length > 0 && (
                <ul className="clarify">
                  {clarifyingQuestions.map((q, i) => (<li key={i}>â€¢ {q}</li>))}
                </ul>
              )}
            </>
          ) : (
            <div className="result surface elevate">
              <div className="result-title">
                <img src={user_icon} alt="" />
                <p>{recentPrompt}</p>
              </div>
              <div className="result-data surface elevate">
                <img src={gemini_icon} alt=""></img>
                {loading ? (
                  <div className="loader">
                    <hr />
                    <hr />
                    <hr />
                  </div>
                ) : (
                  <p dangerouslySetInnerHTML={{ __html: resultData }}></p>
                )}
              </div>
            </div>
          )}
          <div className="main-bottom">
            <div className="search-box surface elevate">
              <input
                onChange={(e) => setInput(e.target.value)}
                value={input}
                type="text"
                placeholder="Share your queries here"
                onKeyDown={(e)=>{ if(e.key==='Enter'){ e.preventDefault(); onSent(); } }}
              />
              <div>
                <img onClick={() => onSent()} src={send_icon} alt="" />
              </div>
            </div>
            <div className="tools">
              <a className="btn" href={nearbyDoctorUrl} target="_blank" rel="noreferrer">Doctor visit: Google Nearby</a>
              <button className="btn" onClick={handleSelfCare}>Self-care advice</button>
              <button className="btn" onClick={() => window.dispatchEvent(new CustomEvent('docagent:navigate', { detail: { page: 5 } }))}>Emergency form</button>
              <button className="btn" onClick={downloadDoctorReport}>Download Doctor Report</button>
              <button className="btn btn-outline" onClick={openPrintableReport}>Generate Chat PDF</button>
            </div>
            {/* Emergency modal removed; now a dedicated page */}
            {trendsNote && <p className="trends">{trendsNote}</p>}
            {researchCitations?.length > 0 && (
              <div className="citations">
                <h4>Research-backed info</h4>
                <ul>
                  {researchCitations.map((c, i) => (
                    <li key={i}><a href={c.url} target="_blank" rel="noreferrer">{c.title}</a>: {c.extract}</li>
                  ))}
                </ul>
              </div>
            )}
            {lifestyleSuggestions?.length > 0 && (
              <div className="suggestions">
                <h4>Self-care suggestions</h4>
                <ul>
                  {lifestyleSuggestions.map((s, i)=>(<li key={i}>{s}</li>))}
                </ul>
              </div>
            )}
          </div>
        </div>
      </InnerLayout>
    </MentStyled>
  );
}

const MentStyled = styled.nav`
  .nav h3 { color: var(--color-primary-300); font-size: var(--font-size-2xl); font-weight: 700; margin: 0 0 var(--space-4) 0; }
  .main { display: flex; flex-direction: column; gap: var(--space-6); min-height: 70vh; }
  .main .nav { display: flex; align-items: center; justify-content: space-between; font-size: var(--font-size-xl); padding: 0 var(--space-2); }

  .main-container { width: 100%; max-width: 900px; margin: 0 auto; color: var(--color-text); display: flex; flex-direction: column; gap: var(--space-6); }
  .main .greet { margin: var(--space-6) 0; font-size: var(--font-size-3xl); color: var(--color-text-dim); font-weight: 600; padding: 0 var(--space-2); }
  .main .greet span { background: -webkit-linear-gradient(16deg, #4b90ff, #ff5546); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }

  .result { padding: var(--space-4); border-radius: var(--radius-lg); border: 1px solid var(--color-border); }
  .result::-webkit-scrollbar { display: none; }
  .result-title { margin: var(--space-6) 0; display: flex; align-items: center; gap: var(--space-4); }
  .result img { width: 40px; border-radius: 50%; }
  .result-data { display: flex; align-items: flex-start; gap: var(--space-4); }

  .loader { width: 100%; display: flex; flex-direction: column; gap: 10px; }
  .loader hr { border-radius: 4px; border: none; background-color: #f6f7f8; background: linear-gradient(to right, #d5a8ff, #f6f7f8, #d5a8ff); background-size: 800px 50px; height: 20px; animation: loader 3s infinite linear; }
  @keyframes loader { 0% { background-position: -800px 0px; } 100% { background-position: 800px 0px; } }
  .result-data p { font-size: 17px; font-weight: 300; line-height: 1.8; color: var(--color-text); }

  .main-bottom { margin-top: auto; width: 100%; max-width: 900px; padding: 0 var(--space-2) var(--space-4); margin-left: auto; margin-right: auto; }
  .search-box { display: flex; align-items: center; justify-content: space-between; gap: var(--space-4); background: linear-gradient(180deg, var(--color-surface) 0%, var(--color-surface-2) 100%); border: 1px solid var(--color-border); margin: 0; padding: 10px 16px; border-radius: 999px; }
  .search-box img { width: 24px; cursor: pointer; }
  .search-box input { flex: 1; background: transparent; border: none; outline: none; padding: 9px; font-size: 18px; color: var(--color-text); }
  .search-box input::placeholder { color: var(--color-text-dim); }
  .search-box div { display: flex; align-items: center; gap: 15px; }
  .tools{ display:flex; gap: var(--space-4); margin-top: var(--space-4); }
  .btn{ background: var(--color-primary); color: white; border: none; padding: 10px 14px; border-radius: 12px; text-decoration: none; cursor: pointer; box-shadow: var(--shadow-1); }
  .btn:hover{ background: var(--color-primary-600); }
  .er-form{ margin-top: var(--space-4); padding: var(--space-4); border: 1px solid var(--color-border); border-radius: var(--radius-lg); display: grid; gap: var(--space-3); }
  .er-form .grid{ display: grid; grid-template-columns: 1fr 1fr; gap: var(--space-3); }
  .er-form input, .er-form textarea{ width: 100%; padding: 10px 12px; border-radius: 10px; border: 1px solid var(--color-border); background: var(--color-surface); color: var(--color-text); }
  .er-form .actions{ display:flex; gap: var(--space-3); }
  .er-modal{ position: fixed; inset: 0; display:flex; align-items:center; justify-content:center; background: rgba(0,0,0,0.45); z-index: 50; opacity: 0; pointer-events: none; transition: opacity .25s ease; }
  .er-modal.show{ opacity: 1; pointer-events: auto; }
  .er-sheet{ width: min(900px, 92%); max-height: 80vh; overflow:auto; padding: var(--space-6); border-radius: var(--radius-lg); transform: translateY(16px); transition: transform .25s ease; border: 1px solid var(--color-border); background: linear-gradient(180deg, var(--color-surface) 0%, var(--color-surface-2) 100%); box-shadow: var(--shadow-glow); }
  .er-modal.show .er-sheet{ transform: translateY(0); }
  .er-head{ display:flex; align-items:center; justify-content: space-between; margin-bottom: var(--space-4); }
  .er-title{ display:flex; align-items:center; gap: var(--space-3); }
  .pill{ display:inline-block; padding: 4px 8px; border-radius: 999px; border: 1px solid rgba(124,92,255,0.45); background: rgba(124,92,255,0.12); color: var(--color-primary-300); font-weight: 700; font-size: 12px; }
  .trends{ margin-top: var(--space-3); color: var(--color-text-dim); }
  .triage-banner{ padding: 10px 14px; border-radius: 12px; margin-bottom: var(--space-4); font-weight: 600; }
  .triage-banner.urgent{ background: rgba(255,176,32,0.15); border:1px solid rgba(255,176,32,0.4); }
  .triage-banner.emergency{ background: rgba(255,93,93,0.15); border:1px solid rgba(255,93,93,0.45); }
  .citations, .suggestions{ margin-top: var(--space-6); }
  .citations h4, .suggestions h4{ margin-bottom: var(--space-2); }
  .citations ul, .suggestions ul{ padding-left: var(--space-4); display: grid; gap: var(--space-2); }
  .citations a{ color: var(--color-primary-300); }
  .disclaimer{ margin-top: var(--space-6); color: var(--color-text-dim); font-size: var(--font-size-sm); }
`;

export default AIConsult;
